input Credentials {
    username: String
    password: String
    __typename:String
}

input CreateCourse {
    title: String
    pitch: String
    description: String
    member_limit: Int
    subjects: [String!]
    __typename:String
}

enum CourseStatus {
    active
    ongoing
    archived
}

input CourseFilter {
    byTopic: String
    byStatus: CourseStatus
}

type Login {
    token: String
    __typename:String
}

type User {
    id: String
    name: String
    email: String
    __typename:String
}

type Course {
    id: String
    title: String
    pitch: String
    status: String,
    description: String
    status: String
    member_count: Int
    member_limit: Int
    members: [User]
    created_at: String
    created_by: User
    __typename:String
}

type Resource {
    id: String
    title: String
    description: String
    mime: String
    uri: String
    subject: String
    created_at: String
    created_by: String
    __typename:String
}

type Subject {
    id: String
    title: String
    description: String
    course: Course
    resources: [Resource]
    order: Int
    resource_count: Int
    created_at: String
    finished_at: String
    created_by: String
    __typename:String
}

type QueryRoot {
    user(email: String): User
    users: [User]
    course(id: String): Course
    courses(filter: CourseFilter): [Course]
    subject(id: String): Subject
    subjects(course: String): [Subject]
}

type MutationRoot {
    login(credentials: Credentials): Login
    course(course: CreateCourse): Course
    join(course: String, member: String): Course
}

schema {
    query: QueryRoot
    mutation: MutationRoot
}
