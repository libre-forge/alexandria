input Credentials {
    username: String
    password: String
    __typename:String
}

input CreateCourse {
    title: String!
    pitch: String!
    description: String
    member_limit: Int!
    subjects: [String!]
    __typename:String
}

input CreateSubject {
    title: String!
    description: String!
    course: String!
    order: Int!
    finished_at: String
    created_by: String!
}

input CreateResource {
    title: String!
    description: String
    type: String!
    uri: String!
    subject: String!
    created_by: String!
}

enum CourseStatus {
    active
    ongoing
    archived
}

input CourseFilter {
    byTopic: String
    byStatus: CourseStatus
}

type Login {
    token: String
    user: User
    __typename:String
}

type User {
    id: String
    name: String
    email: String
    __typename:String
}

type Course {
    id: String
    title: String
    pitch: String
    status: String,
    description: String
    status: String
    subjects: [Subject]
    member_count: Int
    member_limit: Int
    members: [User]
    created_at: String
    created_by: User
    __typename:String
}

input Pagination {
  first: Int
  last: Int
  before: String
  after: String
}

type CourseResult {
  totalCount: Int
  pageInfo: PageInfo
  edges: [CourseNode]
}

type CourseNode {
  node: Course
  cursor: String!
}

type PageInfo {
  startCursor: String
  endCursor: String
}

type Resource {
    id: String
    title: String
    description: String
    type: String
    uri: String
    subject: String
    created_at: String
    created_by: User
    __typename:String
}

type Subject {
    id: String
    title: String
    description: String
    course: Course
    entry_order: Int
    status: String
    resources: [Resource]
    resource_count: Int
    created_at: String
    finished_at: String
    created_by: User
    __typename:String
}

type Query {
    user(email: String!): User
    course(id: String!): Course
    courses(filter: CourseFilter, pagination: Pagination): CourseResult
    subject(id: String!): Subject
}

type Mutation {
    login(credentials: Credentials!): Login

    course(course: CreateCourse!): Course
    subject(subject: CreateSubject!): Subject
    resource(resource: CreateResource!): Resource

    join(course: String!): Course
}

schema {
    query: Query
    mutation: Mutation
}
